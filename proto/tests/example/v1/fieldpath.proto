// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package tests.example.v1;

import "buf/validate/validate.proto";

option features.field_presence = IMPLICIT;

message FieldPathSimple {
  uint64 val = 1 [(buf.validate.field).uint64.gt = 1];

  FieldPathNested nested = 4;

  extensions 1000 to max;
}

extend FieldPathSimple {
  repeated uint64 ext = 1000 [(buf.validate.field).repeated.items.uint64.gt = 1];
}

message FieldPathNested {
  double val = 1 [(buf.validate.field).double = {
    gte: -1
    lte: 1
  }];
}

message FieldPathMaps {
  map<int32, int32> int32_int32_map = 1 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      int32: {gt: 1}
    }
    values: {
      int32: {gt: 1}
    }
  }];
  map<int32, FieldPathSimple> int32_map = 2 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      int32: {gt: 1}
    }
  }];
  map<int64, FieldPathSimple> int64_map = 3 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      int64: {gt: 1}
    }
  }];
  map<sint32, FieldPathSimple> sint32_map = 4 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      sint32: {gt: 1}
    }
  }];
  map<sint64, FieldPathSimple> sint64_map = 5 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      sint64: {gt: 1}
    }
  }];
  map<sfixed32, FieldPathSimple> sfixed32_map = 6 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      sfixed32: {gt: 1}
    }
  }];
  map<sfixed64, FieldPathSimple> sfixed64_map = 7 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      sfixed64: {gt: 1}
    }
  }];
  map<uint32, FieldPathSimple> uint32_map = 8 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      uint32: {gt: 1}
    }
  }];
  map<uint64, FieldPathSimple> uint64_map = 9 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      uint64: {gt: 1}
    }
  }];
  map<fixed32, FieldPathSimple> fixed32_map = 10 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      fixed32: {gt: 1}
    }
  }];
  map<fixed64, FieldPathSimple> fixed64_map = 11 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      fixed64: {gt: 1}
    }
  }];
  map<string, FieldPathSimple> string_map = 12 [(buf.validate.field).map = {
    max_pairs: 3
    keys: {
      string: {min_len: 2}
    }
  }];
  map<bool, FieldPathSimple> bool_map = 13 [(buf.validate.field).map = {max_pairs: 3}];
}

message FieldPathRepeated {
  repeated int32 val = 1 [(buf.validate.field).repeated.items.int32.gt = 1];

  repeated FieldPathSimple msg = 2;
}
