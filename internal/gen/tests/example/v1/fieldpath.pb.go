// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: tests/example/v1/fieldpath.proto

package examplev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FieldPathSimple struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Val    uint64           `protobuf:"varint,1,opt,name=val" json:"val,omitempty"`
	Nested *FieldPathNested `protobuf:"bytes,4,opt,name=nested" json:"nested,omitempty"`
}

func (x *FieldPathSimple) Reset() {
	*x = FieldPathSimple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_example_v1_fieldpath_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPathSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPathSimple) ProtoMessage() {}

func (x *FieldPathSimple) ProtoReflect() protoreflect.Message {
	mi := &file_tests_example_v1_fieldpath_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPathSimple.ProtoReflect.Descriptor instead.
func (*FieldPathSimple) Descriptor() ([]byte, []int) {
	return file_tests_example_v1_fieldpath_proto_rawDescGZIP(), []int{0}
}

func (x *FieldPathSimple) GetVal() uint64 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *FieldPathSimple) GetNested() *FieldPathNested {
	if x != nil {
		return x.Nested
	}
	return nil
}

type FieldPathNested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val float64 `protobuf:"fixed64,1,opt,name=val" json:"val,omitempty"`
}

func (x *FieldPathNested) Reset() {
	*x = FieldPathNested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_example_v1_fieldpath_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPathNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPathNested) ProtoMessage() {}

func (x *FieldPathNested) ProtoReflect() protoreflect.Message {
	mi := &file_tests_example_v1_fieldpath_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPathNested.ProtoReflect.Descriptor instead.
func (*FieldPathNested) Descriptor() ([]byte, []int) {
	return file_tests_example_v1_fieldpath_proto_rawDescGZIP(), []int{1}
}

func (x *FieldPathNested) GetVal() float64 {
	if x != nil {
		return x.Val
	}
	return 0
}

type FieldPathMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Int32Map map[int32]int32             `protobuf:"bytes,1,rep,name=int32_int32_map,json=int32Int32Map" json:"int32_int32_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int32Map      map[int32]*FieldPathSimple  `protobuf:"bytes,2,rep,name=int32_map,json=int32Map" json:"int32_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int64Map      map[int64]*FieldPathSimple  `protobuf:"bytes,3,rep,name=int64_map,json=int64Map" json:"int64_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sint32Map     map[int32]*FieldPathSimple  `protobuf:"bytes,4,rep,name=sint32_map,json=sint32Map" json:"sint32_map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sint64Map     map[int64]*FieldPathSimple  `protobuf:"bytes,5,rep,name=sint64_map,json=sint64Map" json:"sint64_map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed32Map   map[int32]*FieldPathSimple  `protobuf:"bytes,6,rep,name=sfixed32_map,json=sfixed32Map" json:"sfixed32_map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed64Map   map[int64]*FieldPathSimple  `protobuf:"bytes,7,rep,name=sfixed64_map,json=sfixed64Map" json:"sfixed64_map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint32Map     map[uint32]*FieldPathSimple `protobuf:"bytes,8,rep,name=uint32_map,json=uint32Map" json:"uint32_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint64Map     map[uint64]*FieldPathSimple `protobuf:"bytes,9,rep,name=uint64_map,json=uint64Map" json:"uint64_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed32Map    map[uint32]*FieldPathSimple `protobuf:"bytes,10,rep,name=fixed32_map,json=fixed32Map" json:"fixed32_map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed64Map    map[uint64]*FieldPathSimple `protobuf:"bytes,11,rep,name=fixed64_map,json=fixed64Map" json:"fixed64_map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringMap     map[string]*FieldPathSimple `protobuf:"bytes,12,rep,name=string_map,json=stringMap" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolMap       map[bool]*FieldPathSimple   `protobuf:"bytes,13,rep,name=bool_map,json=boolMap" json:"bool_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *FieldPathMaps) Reset() {
	*x = FieldPathMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_example_v1_fieldpath_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPathMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPathMaps) ProtoMessage() {}

func (x *FieldPathMaps) ProtoReflect() protoreflect.Message {
	mi := &file_tests_example_v1_fieldpath_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPathMaps.ProtoReflect.Descriptor instead.
func (*FieldPathMaps) Descriptor() ([]byte, []int) {
	return file_tests_example_v1_fieldpath_proto_rawDescGZIP(), []int{2}
}

func (x *FieldPathMaps) GetInt32Int32Map() map[int32]int32 {
	if x != nil {
		return x.Int32Int32Map
	}
	return nil
}

func (x *FieldPathMaps) GetInt32Map() map[int32]*FieldPathSimple {
	if x != nil {
		return x.Int32Map
	}
	return nil
}

func (x *FieldPathMaps) GetInt64Map() map[int64]*FieldPathSimple {
	if x != nil {
		return x.Int64Map
	}
	return nil
}

func (x *FieldPathMaps) GetSint32Map() map[int32]*FieldPathSimple {
	if x != nil {
		return x.Sint32Map
	}
	return nil
}

func (x *FieldPathMaps) GetSint64Map() map[int64]*FieldPathSimple {
	if x != nil {
		return x.Sint64Map
	}
	return nil
}

func (x *FieldPathMaps) GetSfixed32Map() map[int32]*FieldPathSimple {
	if x != nil {
		return x.Sfixed32Map
	}
	return nil
}

func (x *FieldPathMaps) GetSfixed64Map() map[int64]*FieldPathSimple {
	if x != nil {
		return x.Sfixed64Map
	}
	return nil
}

func (x *FieldPathMaps) GetUint32Map() map[uint32]*FieldPathSimple {
	if x != nil {
		return x.Uint32Map
	}
	return nil
}

func (x *FieldPathMaps) GetUint64Map() map[uint64]*FieldPathSimple {
	if x != nil {
		return x.Uint64Map
	}
	return nil
}

func (x *FieldPathMaps) GetFixed32Map() map[uint32]*FieldPathSimple {
	if x != nil {
		return x.Fixed32Map
	}
	return nil
}

func (x *FieldPathMaps) GetFixed64Map() map[uint64]*FieldPathSimple {
	if x != nil {
		return x.Fixed64Map
	}
	return nil
}

func (x *FieldPathMaps) GetStringMap() map[string]*FieldPathSimple {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *FieldPathMaps) GetBoolMap() map[bool]*FieldPathSimple {
	if x != nil {
		return x.BoolMap
	}
	return nil
}

type FieldPathRepeated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val []int32            `protobuf:"varint,1,rep,packed,name=val" json:"val,omitempty"`
	Msg []*FieldPathSimple `protobuf:"bytes,2,rep,name=msg" json:"msg,omitempty"`
}

func (x *FieldPathRepeated) Reset() {
	*x = FieldPathRepeated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_example_v1_fieldpath_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPathRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPathRepeated) ProtoMessage() {}

func (x *FieldPathRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_tests_example_v1_fieldpath_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPathRepeated.ProtoReflect.Descriptor instead.
func (*FieldPathRepeated) Descriptor() ([]byte, []int) {
	return file_tests_example_v1_fieldpath_proto_rawDescGZIP(), []int{3}
}

func (x *FieldPathRepeated) GetVal() []int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *FieldPathRepeated) GetMsg() []*FieldPathSimple {
	if x != nil {
		return x.Msg
	}
	return nil
}

var file_tests_example_v1_fieldpath_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*FieldPathSimple)(nil),
		ExtensionType: ([]uint64)(nil),
		Field:         1000,
		Name:          "tests.example.v1.ext",
		Tag:           "varint,1000,rep,packed,name=ext",
		Filename:      "tests/example/v1/fieldpath.proto",
	},
}

// Extension fields to FieldPathSimple.
var (
	// repeated uint64 ext = 1000;
	E_Ext = &file_tests_example_v1_fieldpath_proto_extTypes[0]
)

var File_tests_example_v1_fieldpath_proto protoreflect.FileDescriptor

var file_tests_example_v1_fieldpath_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x72, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x20, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12,
	0x39, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10,
	0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x3c, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0xba, 0x48, 0x14, 0x12, 0x12, 0x19, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf0, 0x3f, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0xd9, 0x13, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x70, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x14, 0xba, 0x48, 0x11, 0x9a, 0x01, 0x0e, 0x10, 0x03, 0x22, 0x04, 0x1a, 0x02,
	0x20, 0x01, 0x2a, 0x04, 0x1a, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01,
	0x08, 0x10, 0x03, 0x22, 0x04, 0x1a, 0x02, 0x20, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x12, 0x5a, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x10, 0x03, 0x22,
	0x04, 0x22, 0x02, 0x20, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12,
	0x5d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x10, 0x03, 0x22, 0x04, 0x3a,
	0x02, 0x20, 0x02, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x5d,
	0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x10, 0x03, 0x22, 0x04, 0x42, 0x02,
	0x20, 0x02, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x66, 0x0a,
	0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x9a, 0x01, 0x0b, 0x10, 0x03, 0x22,
	0x07, 0x5a, 0x05, 0x25, 0x01, 0x00, 0x00, 0x00, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x6a, 0x0a, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0xba,
	0x48, 0x12, 0x9a, 0x01, 0x0f, 0x10, 0x03, 0x22, 0x0b, 0x62, 0x09, 0x21, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61,
	0x70, 0x12, 0x5d, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x10, 0x03, 0x22,
	0x04, 0x2a, 0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x12, 0x5d, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x10, 0x03, 0x22, 0x04,
	0x32, 0x02, 0x20, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12,
	0x63, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x9a, 0x01, 0x0b, 0x10, 0x03, 0x22,
	0x07, 0x4a, 0x05, 0x25, 0x01, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4d, 0x61, 0x70, 0x12, 0x67, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0xba, 0x48, 0x12, 0x9a,
	0x01, 0x0f, 0x10, 0x03, 0x22, 0x0b, 0x52, 0x09, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x5d, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x9a, 0x01, 0x08, 0x10, 0x03, 0x22, 0x04, 0x72, 0x02, 0x10,
	0x02, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x51, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x9a, 0x01, 0x02, 0x10, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x1a,
	0x40, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5e, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5e, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x10, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x10, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x0f, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a,
	0x0f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5f, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5d, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x68, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x1a, 0x02, 0x20, 0x01, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x3a, 0x42, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x03, 0x28, 0x04, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x92,
	0x01, 0x06, 0x22, 0x04, 0x32, 0x02, 0x20, 0x01, 0x52, 0x03, 0x65, 0x78, 0x74, 0x42, 0xdb, 0x01,
	0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x70, 0x61, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x45, 0x58, 0xaa, 0x02, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x10, 0x54, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1c, 0x54, 0x65, 0x73, 0x74, 0x73, 0x5c, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x12, 0x54, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x3a, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x92, 0x03, 0x02, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var (
	file_tests_example_v1_fieldpath_proto_rawDescOnce sync.Once
	file_tests_example_v1_fieldpath_proto_rawDescData = file_tests_example_v1_fieldpath_proto_rawDesc
)

func file_tests_example_v1_fieldpath_proto_rawDescGZIP() []byte {
	file_tests_example_v1_fieldpath_proto_rawDescOnce.Do(func() {
		file_tests_example_v1_fieldpath_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_example_v1_fieldpath_proto_rawDescData)
	})
	return file_tests_example_v1_fieldpath_proto_rawDescData
}

var file_tests_example_v1_fieldpath_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_tests_example_v1_fieldpath_proto_goTypes = []interface{}{
	(*FieldPathSimple)(nil),   // 0: tests.example.v1.FieldPathSimple
	(*FieldPathNested)(nil),   // 1: tests.example.v1.FieldPathNested
	(*FieldPathMaps)(nil),     // 2: tests.example.v1.FieldPathMaps
	(*FieldPathRepeated)(nil), // 3: tests.example.v1.FieldPathRepeated
	nil,                       // 4: tests.example.v1.FieldPathMaps.Int32Int32MapEntry
	nil,                       // 5: tests.example.v1.FieldPathMaps.Int32MapEntry
	nil,                       // 6: tests.example.v1.FieldPathMaps.Int64MapEntry
	nil,                       // 7: tests.example.v1.FieldPathMaps.Sint32MapEntry
	nil,                       // 8: tests.example.v1.FieldPathMaps.Sint64MapEntry
	nil,                       // 9: tests.example.v1.FieldPathMaps.Sfixed32MapEntry
	nil,                       // 10: tests.example.v1.FieldPathMaps.Sfixed64MapEntry
	nil,                       // 11: tests.example.v1.FieldPathMaps.Uint32MapEntry
	nil,                       // 12: tests.example.v1.FieldPathMaps.Uint64MapEntry
	nil,                       // 13: tests.example.v1.FieldPathMaps.Fixed32MapEntry
	nil,                       // 14: tests.example.v1.FieldPathMaps.Fixed64MapEntry
	nil,                       // 15: tests.example.v1.FieldPathMaps.StringMapEntry
	nil,                       // 16: tests.example.v1.FieldPathMaps.BoolMapEntry
}
var file_tests_example_v1_fieldpath_proto_depIdxs = []int32{
	1,  // 0: tests.example.v1.FieldPathSimple.nested:type_name -> tests.example.v1.FieldPathNested
	4,  // 1: tests.example.v1.FieldPathMaps.int32_int32_map:type_name -> tests.example.v1.FieldPathMaps.Int32Int32MapEntry
	5,  // 2: tests.example.v1.FieldPathMaps.int32_map:type_name -> tests.example.v1.FieldPathMaps.Int32MapEntry
	6,  // 3: tests.example.v1.FieldPathMaps.int64_map:type_name -> tests.example.v1.FieldPathMaps.Int64MapEntry
	7,  // 4: tests.example.v1.FieldPathMaps.sint32_map:type_name -> tests.example.v1.FieldPathMaps.Sint32MapEntry
	8,  // 5: tests.example.v1.FieldPathMaps.sint64_map:type_name -> tests.example.v1.FieldPathMaps.Sint64MapEntry
	9,  // 6: tests.example.v1.FieldPathMaps.sfixed32_map:type_name -> tests.example.v1.FieldPathMaps.Sfixed32MapEntry
	10, // 7: tests.example.v1.FieldPathMaps.sfixed64_map:type_name -> tests.example.v1.FieldPathMaps.Sfixed64MapEntry
	11, // 8: tests.example.v1.FieldPathMaps.uint32_map:type_name -> tests.example.v1.FieldPathMaps.Uint32MapEntry
	12, // 9: tests.example.v1.FieldPathMaps.uint64_map:type_name -> tests.example.v1.FieldPathMaps.Uint64MapEntry
	13, // 10: tests.example.v1.FieldPathMaps.fixed32_map:type_name -> tests.example.v1.FieldPathMaps.Fixed32MapEntry
	14, // 11: tests.example.v1.FieldPathMaps.fixed64_map:type_name -> tests.example.v1.FieldPathMaps.Fixed64MapEntry
	15, // 12: tests.example.v1.FieldPathMaps.string_map:type_name -> tests.example.v1.FieldPathMaps.StringMapEntry
	16, // 13: tests.example.v1.FieldPathMaps.bool_map:type_name -> tests.example.v1.FieldPathMaps.BoolMapEntry
	0,  // 14: tests.example.v1.FieldPathRepeated.msg:type_name -> tests.example.v1.FieldPathSimple
	0,  // 15: tests.example.v1.FieldPathMaps.Int32MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 16: tests.example.v1.FieldPathMaps.Int64MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 17: tests.example.v1.FieldPathMaps.Sint32MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 18: tests.example.v1.FieldPathMaps.Sint64MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 19: tests.example.v1.FieldPathMaps.Sfixed32MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 20: tests.example.v1.FieldPathMaps.Sfixed64MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 21: tests.example.v1.FieldPathMaps.Uint32MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 22: tests.example.v1.FieldPathMaps.Uint64MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 23: tests.example.v1.FieldPathMaps.Fixed32MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 24: tests.example.v1.FieldPathMaps.Fixed64MapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 25: tests.example.v1.FieldPathMaps.StringMapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 26: tests.example.v1.FieldPathMaps.BoolMapEntry.value:type_name -> tests.example.v1.FieldPathSimple
	0,  // 27: tests.example.v1.ext:extendee -> tests.example.v1.FieldPathSimple
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	27, // [27:28] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_tests_example_v1_fieldpath_proto_init() }
func file_tests_example_v1_fieldpath_proto_init() {
	if File_tests_example_v1_fieldpath_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_example_v1_fieldpath_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPathSimple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_tests_example_v1_fieldpath_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPathNested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_example_v1_fieldpath_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPathMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_example_v1_fieldpath_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPathRepeated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_example_v1_fieldpath_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_tests_example_v1_fieldpath_proto_goTypes,
		DependencyIndexes: file_tests_example_v1_fieldpath_proto_depIdxs,
		MessageInfos:      file_tests_example_v1_fieldpath_proto_msgTypes,
		ExtensionInfos:    file_tests_example_v1_fieldpath_proto_extTypes,
	}.Build()
	File_tests_example_v1_fieldpath_proto = out.File
	file_tests_example_v1_fieldpath_proto_rawDesc = nil
	file_tests_example_v1_fieldpath_proto_goTypes = nil
	file_tests_example_v1_fieldpath_proto_depIdxs = nil
}
